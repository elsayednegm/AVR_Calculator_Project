
Calculator_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000023c4  00002458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800094  00800094  0000248c  2**0
                  ALLOC
  3 .stab         00001dac  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e0b  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005043  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005183  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000052f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000978f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3d       	cpi	r26, 0xD7	; 215
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 10 	call	0x2162	; 0x2162 <main>
      8a:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8  Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <MDIO_Error_State_SetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <MDIO_Error_State_SetPinDirection+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <MDIO_Error_State_SetPinDirection+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
     b58:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	88 30       	cpi	r24, 0x08	; 8
     b62:	08 f0       	brcs	.+2      	; 0xb66 <MDIO_Error_State_SetPinDirection+0x20>
     b64:	e8 c0       	rjmp	.+464    	; 0xd36 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
	switch(Copy_u8PortNumber)
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	3e 83       	std	Y+6, r19	; 0x06
     b6e:	2d 83       	std	Y+5, r18	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 05       	cpc	r25, r1
     b78:	09 f4       	brne	.+2      	; 0xb7c <MDIO_Error_State_SetPinDirection+0x36>
     b7a:	48 c0       	rjmp	.+144    	; 0xc0c <MDIO_Error_State_SetPinDirection+0xc6>
     b7c:	2d 81       	ldd	r18, Y+5	; 0x05
     b7e:	3e 81       	ldd	r19, Y+6	; 0x06
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <MDIO_Error_State_SetPinDirection+0x4a>
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	71 f0       	breq	.+28     	; 0xbaa <MDIO_Error_State_SetPinDirection+0x64>
     b8e:	d1 c0       	rjmp	.+418    	; 0xd32 <MDIO_Error_State_SetPinDirection+0x1ec>
     b90:	2d 81       	ldd	r18, Y+5	; 0x05
     b92:	3e 81       	ldd	r19, Y+6	; 0x06
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <MDIO_Error_State_SetPinDirection+0x56>
     b9a:	69 c0       	rjmp	.+210    	; 0xc6e <MDIO_Error_State_SetPinDirection+0x128>
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <MDIO_Error_State_SetPinDirection+0x62>
     ba6:	94 c0       	rjmp	.+296    	; 0xcd0 <MDIO_Error_State_SetPinDirection+0x18a>
     ba8:	c4 c0       	rjmp	.+392    	; 0xd32 <MDIO_Error_State_SetPinDirection+0x1ec>
	{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	a1 f4       	brne	.+40     	; 0xbd8 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e3       	ldi	r30, 0x3A	; 58
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <MDIO_Error_State_SetPinDirection+0x88>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <MDIO_Error_State_SetPinDirection+0x84>
     bd2:	84 2b       	or	r24, r20
     bd4:	8c 93       	st	X, r24
     bd6:	b0 c0       	rjmp	.+352    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	88 23       	and	r24, r24
     bdc:	a9 f4       	brne	.+42     	; 0xc08 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <MDIO_Error_State_SetPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <MDIO_Error_State_SetPinDirection+0xb2>
     c00:	80 95       	com	r24
     c02:	84 23       	and	r24, r20
     c04:	8c 93       	st	X, r24
     c06:	98 c0       	rjmp	.+304    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
     c08:	19 82       	std	Y+1, r1	; 0x01
     c0a:	96 c0       	rjmp	.+300    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	a1 f4       	brne	.+40     	; 0xc3a <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
     c12:	a7 e3       	ldi	r26, 0x37	; 55
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e7 e3       	ldi	r30, 0x37	; 55
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <MDIO_Error_State_SetPinDirection+0xea>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <MDIO_Error_State_SetPinDirection+0xe6>
     c34:	84 2b       	or	r24, r20
     c36:	8c 93       	st	X, r24
     c38:	7f c0       	rjmp	.+254    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	88 23       	and	r24, r24
     c3e:	a9 f4       	brne	.+42     	; 0xc6a <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
     c40:	a7 e3       	ldi	r26, 0x37	; 55
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e7 e3       	ldi	r30, 0x37	; 55
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <MDIO_Error_State_SetPinDirection+0x118>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <MDIO_Error_State_SetPinDirection+0x114>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	67 c0       	rjmp	.+206    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	65 c0       	rjmp	.+202    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
     c74:	a4 e3       	ldi	r26, 0x34	; 52
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <MDIO_Error_State_SetPinDirection+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <MDIO_Error_State_SetPinDirection+0x148>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	4e c0       	rjmp	.+156    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	88 23       	and	r24, r24
     ca0:	a9 f4       	brne	.+42     	; 0xccc <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
     ca2:	a4 e3       	ldi	r26, 0x34	; 52
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <MDIO_Error_State_SetPinDirection+0x17a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <MDIO_Error_State_SetPinDirection+0x176>
     cc4:	80 95       	com	r24
     cc6:	84 23       	and	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	36 c0       	rjmp	.+108    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
     ccc:	19 82       	std	Y+1, r1	; 0x01
     cce:	34 c0       	rjmp	.+104    	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	a1 f4       	brne	.+40     	; 0xcfe <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <MDIO_Error_State_SetPinDirection+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <MDIO_Error_State_SetPinDirection+0x1aa>
     cf8:	84 2b       	or	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	1d c0       	rjmp	.+58     	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	88 23       	and	r24, r24
     d02:	a9 f4       	brne	.+42     	; 0xd2e <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
     d04:	a1 e3       	ldi	r26, 0x31	; 49
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e1 e3       	ldi	r30, 0x31	; 49
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <MDIO_Error_State_SetPinDirection+0x1dc>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <MDIO_Error_State_SetPinDirection+0x1d8>
     d26:	80 95       	com	r24
     d28:	84 23       	and	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
     d2e:	19 82       	std	Y+1, r1	; 0x01
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
     d32:	19 82       	std	Y+1, r1	; 0x01
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <MDIO_Error_State_SetPinDirection+0x1f2>
			break;
	}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
     d36:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_Error_State_ReturnState;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3a:	26 96       	adiw	r28, 0x06	; 6
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <MDIO_Error_State_SetPortDirection>:
/*Set Port Direction Function */
Error_State MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <MDIO_Error_State_SetPortDirection+0x6>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <MDIO_Error_State_SetPortDirection+0x8>
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	8f 3f       	cpi	r24, 0xFF	; 255
     d66:	19 f0       	breq	.+6      	; 0xd6e <MDIO_Error_State_SetPortDirection+0x22>
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	88 23       	and	r24, r24
     d6c:	a9 f5       	brne	.+106    	; 0xdd8 <MDIO_Error_State_SetPortDirection+0x8c>
	{
	switch(Copy_u8PortNumber)
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	3d 83       	std	Y+5, r19	; 0x05
     d76:	2c 83       	std	Y+4, r18	; 0x04
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	91 05       	cpc	r25, r1
     d80:	d1 f0       	breq	.+52     	; 0xdb6 <MDIO_Error_State_SetPortDirection+0x6a>
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	2c f4       	brge	.+10     	; 0xd96 <MDIO_Error_State_SetPortDirection+0x4a>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	61 f0       	breq	.+24     	; 0xdac <MDIO_Error_State_SetPortDirection+0x60>
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <MDIO_Error_State_SetPortDirection+0x88>
     d96:	2c 81       	ldd	r18, Y+4	; 0x04
     d98:	3d 81       	ldd	r19, Y+5	; 0x05
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	81 f0       	breq	.+32     	; 0xdc0 <MDIO_Error_State_SetPortDirection+0x74>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	91 05       	cpc	r25, r1
     da8:	81 f0       	breq	.+32     	; 0xdca <MDIO_Error_State_SetPortDirection+0x7e>
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <MDIO_Error_State_SetPortDirection+0x88>
	{
		case MDIO_PORTA:
		DDRA=Copy_u8PortDirection;
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	80 83       	st	Z, r24
     db4:	12 c0       	rjmp	.+36     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
		break;
		case MDIO_PORTB:
		DDRB=Copy_u8PortDirection;
     db6:	e7 e3       	ldi	r30, 0x37	; 55
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	80 83       	st	Z, r24
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
		break;
		case MDIO_PORTC:
		DDRC=Copy_u8PortDirection;
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	80 83       	st	Z, r24
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
		break;	
		case MDIO_PORTD:
		DDRD=Copy_u8PortDirection;
     dca:	e1 e3       	ldi	r30, 0x31	; 49
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 83       	st	Z, r24
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
		break;	
		default:
			LOC_Error_State_ReturnState=NOK;
     dd4:	19 82       	std	Y+1, r1	; 0x01
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <MDIO_Error_State_SetPortDirection+0x8e>
			break;
	}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <MDIO_Error_State_SetPinValue+0x6>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <MDIO_Error_State_SetPinValue+0x8>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <MDIO_Error_State_SetPinValue+0xa>
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	8a 83       	std	Y+2, r24	; 0x02
     dfc:	6b 83       	std	Y+3, r22	; 0x03
     dfe:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	89 83       	std	Y+1, r24	; 0x01
	
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	08 f0       	brcs	.+2      	; 0xe0c <MDIO_Error_State_SetPinValue+0x20>
     e0a:	e8 c0       	rjmp	.+464    	; 0xfdc <MDIO_Error_State_SetPinValue+0x1f0>
	{
	switch(Copy_u8PortNumber)
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3e 83       	std	Y+6, r19	; 0x06
     e14:	2d 83       	std	Y+5, r18	; 0x05
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <MDIO_Error_State_SetPinValue+0x36>
     e20:	48 c0       	rjmp	.+144    	; 0xeb2 <MDIO_Error_State_SetPinValue+0xc6>
     e22:	2d 81       	ldd	r18, Y+5	; 0x05
     e24:	3e 81       	ldd	r19, Y+6	; 0x06
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	2c f4       	brge	.+10     	; 0xe36 <MDIO_Error_State_SetPinValue+0x4a>
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	71 f0       	breq	.+28     	; 0xe50 <MDIO_Error_State_SetPinValue+0x64>
     e34:	d1 c0       	rjmp	.+418    	; 0xfd8 <MDIO_Error_State_SetPinValue+0x1ec>
     e36:	2d 81       	ldd	r18, Y+5	; 0x05
     e38:	3e 81       	ldd	r19, Y+6	; 0x06
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <MDIO_Error_State_SetPinValue+0x56>
     e40:	69 c0       	rjmp	.+210    	; 0xf14 <MDIO_Error_State_SetPinValue+0x128>
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <MDIO_Error_State_SetPinValue+0x62>
     e4c:	94 c0       	rjmp	.+296    	; 0xf76 <MDIO_Error_State_SetPinValue+0x18a>
     e4e:	c4 c0       	rjmp	.+392    	; 0xfd8 <MDIO_Error_State_SetPinValue+0x1ec>
	{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	a1 f4       	brne	.+40     	; 0xe7e <MDIO_Error_State_SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <MDIO_Error_State_SetPinValue+0x88>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <MDIO_Error_State_SetPinValue+0x84>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	b0 c0       	rjmp	.+352    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	88 23       	and	r24, r24
     e82:	a9 f4       	brne	.+42     	; 0xeae <MDIO_Error_State_SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
     e84:	ab e3       	ldi	r26, 0x3B	; 59
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <MDIO_Error_State_SetPinValue+0xb6>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <MDIO_Error_State_SetPinValue+0xb2>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	98 c0       	rjmp	.+304    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
     eae:	19 82       	std	Y+1, r1	; 0x01
     eb0:	96 c0       	rjmp	.+300    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	a1 f4       	brne	.+40     	; 0xee0 <MDIO_Error_State_SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <MDIO_Error_State_SetPinValue+0xea>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <MDIO_Error_State_SetPinValue+0xe6>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	7f c0       	rjmp	.+254    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	88 23       	and	r24, r24
     ee4:	a9 f4       	brne	.+42     	; 0xf10 <MDIO_Error_State_SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
     ee6:	a8 e3       	ldi	r26, 0x38	; 56
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e3       	ldi	r30, 0x38	; 56
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <MDIO_Error_State_SetPinValue+0x118>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <MDIO_Error_State_SetPinValue+0x114>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	67 c0       	rjmp	.+206    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
     f10:	19 82       	std	Y+1, r1	; 0x01
     f12:	65 c0       	rjmp	.+202    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue==PIN_HIGH)
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	a1 f4       	brne	.+40     	; 0xf42 <MDIO_Error_State_SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
     f1a:	a5 e3       	ldi	r26, 0x35	; 53
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e5 e3       	ldi	r30, 0x35	; 53
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <MDIO_Error_State_SetPinValue+0x14c>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <MDIO_Error_State_SetPinValue+0x148>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	4e c0       	rjmp	.+156    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 23       	and	r24, r24
     f46:	a9 f4       	brne	.+42     	; 0xf72 <MDIO_Error_State_SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
     f48:	a5 e3       	ldi	r26, 0x35	; 53
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e5 e3       	ldi	r30, 0x35	; 53
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <MDIO_Error_State_SetPinValue+0x17a>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <MDIO_Error_State_SetPinValue+0x176>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	36 c0       	rjmp	.+108    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	34 c0       	rjmp	.+104    	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinValue==PIN_HIGH)
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	a1 f4       	brne	.+40     	; 0xfa4 <MDIO_Error_State_SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
     f7c:	a2 e3       	ldi	r26, 0x32	; 50
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e2 e3       	ldi	r30, 0x32	; 50
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <MDIO_Error_State_SetPinValue+0x1ae>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <MDIO_Error_State_SetPinValue+0x1aa>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	1d c0       	rjmp	.+58     	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	88 23       	and	r24, r24
     fa8:	a9 f4       	brne	.+42     	; 0xfd4 <MDIO_Error_State_SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
     faa:	a2 e3       	ldi	r26, 0x32	; 50
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e2 e3       	ldi	r30, 0x32	; 50
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <MDIO_Error_State_SetPinValue+0x1dc>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <MDIO_Error_State_SetPinValue+0x1d8>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	01 c0       	rjmp	.+2      	; 0xfde <MDIO_Error_State_SetPinValue+0x1f2>
			break;
	}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
     fdc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_Error_State_ReturnState;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe0:	26 96       	adiw	r28, 0x06	; 6
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <MDIO_Error_State_SetPortValue>:

/*Set Port Value Function */
Error_State MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <MDIO_Error_State_SetPortValue+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <MDIO_Error_State_SetPortValue+0x8>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3d 83       	std	Y+5, r19	; 0x05
    1010:	2c 83       	std	Y+4, r18	; 0x04
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	d1 f0       	breq	.+52     	; 0x1050 <MDIO_Error_State_SetPortValue+0x5e>
    101c:	2c 81       	ldd	r18, Y+4	; 0x04
    101e:	3d 81       	ldd	r19, Y+5	; 0x05
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	2c f4       	brge	.+10     	; 0x1030 <MDIO_Error_State_SetPortValue+0x3e>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	61 f0       	breq	.+24     	; 0x1046 <MDIO_Error_State_SetPortValue+0x54>
    102e:	1f c0       	rjmp	.+62     	; 0x106e <MDIO_Error_State_SetPortValue+0x7c>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	81 f0       	breq	.+32     	; 0x105a <MDIO_Error_State_SetPortValue+0x68>
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	91 05       	cpc	r25, r1
    1042:	81 f0       	breq	.+32     	; 0x1064 <MDIO_Error_State_SetPortValue+0x72>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <MDIO_Error_State_SetPortValue+0x7c>
	{
		case MDIO_PORTA:
		PORTA=Copy_u8PortValue;
    1046:	eb e3       	ldi	r30, 0x3B	; 59
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	80 83       	st	Z, r24
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
		break;
		case MDIO_PORTB:
		PORTB=Copy_u8PortValue;
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	80 83       	st	Z, r24
    1058:	0b c0       	rjmp	.+22     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
		break;
		case MDIO_PORTC:
		PORTC=Copy_u8PortValue;
    105a:	e5 e3       	ldi	r30, 0x35	; 53
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	80 83       	st	Z, r24
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
		break;	
		case MDIO_PORTD:
		PORTD=Copy_u8PortValue;
    1064:	e2 e3       	ldi	r30, 0x32	; 50
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	80 83       	st	Z, r24
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <MDIO_Error_State_SetPortValue+0x7e>
		break;	
		default:
			LOC_Error_State_ReturnState=NOK;
    106e:	19 82       	std	Y+1, r1	; 0x01
			break;
	}
	return LOC_Error_State_ReturnState;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <MDIO_Error_State_GetPinValue>:

/*Get Pin Value Function */
Error_State MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	27 97       	sbiw	r28, 0x07	; 7
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	8a 83       	std	Y+2, r24	; 0x02
    1098:	6b 83       	std	Y+3, r22	; 0x03
    109a:	5d 83       	std	Y+5, r21	; 0x05
    109c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01
	
	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue!=NULL_POINTER))
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <MDIO_Error_State_GetPinValue+0x28>
    10a8:	79 c0       	rjmp	.+242    	; 0x119c <MDIO_Error_State_GetPinValue+0x11a>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <MDIO_Error_State_GetPinValue+0x34>
    10b4:	73 c0       	rjmp	.+230    	; 0x119c <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3f 83       	std	Y+7, r19	; 0x07
    10be:	2e 83       	std	Y+6, r18	; 0x06
    10c0:	4e 81       	ldd	r20, Y+6	; 0x06
    10c2:	5f 81       	ldd	r21, Y+7	; 0x07
    10c4:	41 30       	cpi	r20, 0x01	; 1
    10c6:	51 05       	cpc	r21, r1
    10c8:	59 f1       	breq	.+86     	; 0x1120 <MDIO_Error_State_GetPinValue+0x9e>
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	9f 81       	ldd	r25, Y+7	; 0x07
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	91 05       	cpc	r25, r1
    10d2:	34 f4       	brge	.+12     	; 0x10e0 <MDIO_Error_State_GetPinValue+0x5e>
    10d4:	2e 81       	ldd	r18, Y+6	; 0x06
    10d6:	3f 81       	ldd	r19, Y+7	; 0x07
    10d8:	21 15       	cp	r18, r1
    10da:	31 05       	cpc	r19, r1
    10dc:	69 f0       	breq	.+26     	; 0x10f8 <MDIO_Error_State_GetPinValue+0x76>
    10de:	5c c0       	rjmp	.+184    	; 0x1198 <MDIO_Error_State_GetPinValue+0x116>
    10e0:	4e 81       	ldd	r20, Y+6	; 0x06
    10e2:	5f 81       	ldd	r21, Y+7	; 0x07
    10e4:	42 30       	cpi	r20, 0x02	; 2
    10e6:	51 05       	cpc	r21, r1
    10e8:	79 f1       	breq	.+94     	; 0x1148 <MDIO_Error_State_GetPinValue+0xc6>
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	9f 81       	ldd	r25, Y+7	; 0x07
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <MDIO_Error_State_GetPinValue+0x74>
    10f4:	3d c0       	rjmp	.+122    	; 0x1170 <MDIO_Error_State_GetPinValue+0xee>
    10f6:	50 c0       	rjmp	.+160    	; 0x1198 <MDIO_Error_State_GetPinValue+0x116>
	{
		case MDIO_PORTA:
		*P_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
    10f8:	e9 e3       	ldi	r30, 0x39	; 57
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <MDIO_Error_State_GetPinValue+0x8e>
    110c:	55 95       	asr	r21
    110e:	47 95       	ror	r20
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <MDIO_Error_State_GetPinValue+0x8a>
    1114:	ca 01       	movw	r24, r20
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	ec 81       	ldd	r30, Y+4	; 0x04
    111a:	fd 81       	ldd	r31, Y+5	; 0x05
    111c:	80 83       	st	Z, r24
    111e:	3f c0       	rjmp	.+126    	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
		break;
		case MDIO_PORTB:
		*P_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
    1120:	e6 e3       	ldi	r30, 0x36	; 54
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <MDIO_Error_State_GetPinValue+0xb6>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <MDIO_Error_State_GetPinValue+0xb2>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	ec 81       	ldd	r30, Y+4	; 0x04
    1142:	fd 81       	ldd	r31, Y+5	; 0x05
    1144:	80 83       	st	Z, r24
    1146:	2b c0       	rjmp	.+86     	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
		break;
		case MDIO_PORTC:
		*P_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
    1148:	e3 e3       	ldi	r30, 0x33	; 51
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <MDIO_Error_State_GetPinValue+0xde>
    115c:	55 95       	asr	r21
    115e:	47 95       	ror	r20
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <MDIO_Error_State_GetPinValue+0xda>
    1164:	ca 01       	movw	r24, r20
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	ec 81       	ldd	r30, Y+4	; 0x04
    116a:	fd 81       	ldd	r31, Y+5	; 0x05
    116c:	80 83       	st	Z, r24
    116e:	17 c0       	rjmp	.+46     	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
		break;
		case MDIO_PORTD:
		*P_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
    1170:	e0 e3       	ldi	r30, 0x30	; 48
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <MDIO_Error_State_GetPinValue+0x106>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <MDIO_Error_State_GetPinValue+0x102>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	ec 81       	ldd	r30, Y+4	; 0x04
    1192:	fd 81       	ldd	r31, Y+5	; 0x05
    1194:	80 83       	st	Z, r24
    1196:	03 c0       	rjmp	.+6      	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
		break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	01 c0       	rjmp	.+2      	; 0x119e <MDIO_Error_State_GetPinValue+0x11c>
			break;		
	}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    119c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_Error_State_ReturnState;
    119e:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a0:	27 96       	adiw	r28, 0x07	; 7
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <HKPD_Vid_Init>:
		,{'9','6','3','='}
		,{'/','*','-','+'} ,
};


void HKPD_Vid_Init(void){
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62

	MDIO_Error_State_SetPinDirection(CULM_PIN0 ,CULM_PORT,PIN_INPUT);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(CULM_PIN1 ,CULM_PORT,PIN_INPUT);
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(CULM_PIN2 ,CULM_PORT,PIN_INPUT);
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(CULM_PIN3 ,CULM_PORT,PIN_INPUT);
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>

//// Active Pull Up Resistor
	MDIO_Error_State_SetPinValue(CULM_PIN0 ,CULM_PORT,PIN_HIGH);
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(CULM_PIN1 ,CULM_PORT,PIN_HIGH);
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(CULM_PIN2 ,CULM_PORT,PIN_HIGH);
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(CULM_PIN3 ,CULM_PORT,PIN_HIGH);
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>




	MDIO_Error_State_SetPinDirection(ROW_PIN0 ,ROW_PORT,PIN_OUTPUT);
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1 ,ROW_PORT,PIN_OUTPUT);
    1214:	85 e0       	ldi	r24, 0x05	; 5
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	41 e0       	ldi	r20, 0x01	; 1
    121a:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2 ,ROW_PORT,PIN_OUTPUT);
    121e:	86 e0       	ldi	r24, 0x06	; 6
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3 ,ROW_PORT,PIN_OUTPUT);
    1228:	87 e0       	ldi	r24, 0x07	; 7
    122a:	61 e0       	ldi	r22, 0x01	; 1
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>

	MDIO_Error_State_SetPinValue(ROW_PIN0 ,ROW_PORT,PIN_HIGH);
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1 ,ROW_PORT,PIN_HIGH);
    123c:	85 e0       	ldi	r24, 0x05	; 5
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2 ,ROW_PORT,PIN_HIGH);
    1246:	86 e0       	ldi	r24, 0x06	; 6
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3 ,ROW_PORT,PIN_HIGH);
    1250:	87 e0       	ldi	r24, 0x07	; 7
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	41 e0       	ldi	r20, 0x01	; 1
    1256:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>


}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <HKPD_U8GetPressedButton>:
u8 HKPD_U8GetPressedButton(void){
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <HKPD_U8GetPressedButton+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <HKPD_U8GetPressedButton+0x8>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	u8 PressedValue  ;
	u8 ReturnPressedValue=255 ;
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 row_count=4 ;row_count<8 ;row_count++){
    1270:	84 e0       	ldi	r24, 0x04	; 4
    1272:	8a 83       	std	Y+2, r24	; 0x02
    1274:	41 c0       	rjmp	.+130    	; 0x12f8 <HKPD_U8GetPressedButton+0x98>

		MDIO_Error_State_SetPinValue(row_count ,ROW_PORT,PIN_LOW);
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
		for(u8 culm_count=0  ;culm_count<4 ;culm_count++){
    1280:	19 82       	std	Y+1, r1	; 0x01
    1282:	2f c0       	rjmp	.+94     	; 0x12e2 <HKPD_U8GetPressedButton+0x82>
			MDIO_Error_State_GetPinValue(culm_count,CULM_PORT,&PressedValue);
    1284:	9e 01       	movw	r18, r28
    1286:	2c 5f       	subi	r18, 0xFC	; 252
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	a9 01       	movw	r20, r18
    1290:	0e 94 41 08 	call	0x1082	; 0x1082 <MDIO_Error_State_GetPinValue>
			if(PressedValue==0){
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	88 23       	and	r24, r24
    1298:	09 f5       	brne	.+66     	; 0x12dc <HKPD_U8GetPressedButton+0x7c>
				ReturnPressedValue=ArrayValue[row_count-4][culm_count];
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	ac 01       	movw	r20, r24
    12a2:	44 50       	subi	r20, 0x04	; 4
    12a4:	50 40       	sbci	r21, 0x00	; 0
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	ca 01       	movw	r24, r20
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	82 0f       	add	r24, r18
    12b8:	93 1f       	adc	r25, r19
    12ba:	fc 01       	movw	r30, r24
    12bc:	ec 57       	subi	r30, 0x7C	; 124
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <HKPD_U8GetPressedButton+0x76>
				// Write Digit one time in Click Until Release
				while(PressedValue==0){
					MDIO_Error_State_GetPinValue(culm_count,CULM_PORT,&PressedValue);
    12c6:	9e 01       	movw	r18, r28
    12c8:	2c 5f       	subi	r18, 0xFC	; 252
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	a9 01       	movw	r20, r18
    12d2:	0e 94 41 08 	call	0x1082	; 0x1082 <MDIO_Error_State_GetPinValue>
		for(u8 culm_count=0  ;culm_count<4 ;culm_count++){
			MDIO_Error_State_GetPinValue(culm_count,CULM_PORT,&PressedValue);
			if(PressedValue==0){
				ReturnPressedValue=ArrayValue[row_count-4][culm_count];
				// Write Digit one time in Click Until Release
				while(PressedValue==0){
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	88 23       	and	r24, r24
    12da:	a9 f3       	breq	.-22     	; 0x12c6 <HKPD_U8GetPressedButton+0x66>
	u8 PressedValue  ;
	u8 ReturnPressedValue=255 ;
	for(u8 row_count=4 ;row_count<8 ;row_count++){

		MDIO_Error_State_SetPinValue(row_count ,ROW_PORT,PIN_LOW);
		for(u8 culm_count=0  ;culm_count<4 ;culm_count++){
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	84 30       	cpi	r24, 0x04	; 4
    12e6:	70 f2       	brcs	.-100    	; 0x1284 <HKPD_U8GetPressedButton+0x24>


			}
			}

		MDIO_Error_State_SetPinValue(row_count ,ROW_PORT,PIN_HIGH);
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>

}
u8 HKPD_U8GetPressedButton(void){
	u8 PressedValue  ;
	u8 ReturnPressedValue=255 ;
	for(u8 row_count=4 ;row_count<8 ;row_count++){
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	8f 5f       	subi	r24, 0xFF	; 255
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 30       	cpi	r24, 0x08	; 8
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <HKPD_U8GetPressedButton+0xa0>
    12fe:	bb cf       	rjmp	.-138    	; 0x1276 <HKPD_U8GetPressedButton+0x16>



	}

	return ReturnPressedValue ;
    1300:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <HCLCD_VidWriteCommand_8Bits>:
#include"HCLCD_Interface.h"

#include"util/delay.h"

void HCLCD_VidWriteCommand_8Bits(u8 Copy_u8Command)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	6d 97       	sbiw	r28, 0x1d	; 29
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	62 e0       	ldi	r22, 0x02	; 2
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	62 e0       	ldi	r22, 0x02	; 2
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    133e:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	62 e0       	ldi	r22, 0x02	; 2
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a0 e0       	ldi	r26, 0x00	; 0
    1352:	b0 e4       	ldi	r27, 0x40	; 64
    1354:	89 8f       	std	Y+25, r24	; 0x19
    1356:	9a 8f       	std	Y+26, r25	; 0x1a
    1358:	ab 8f       	std	Y+27, r26	; 0x1b
    135a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135c:	69 8d       	ldd	r22, Y+25	; 0x19
    135e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1360:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1362:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	4a e7       	ldi	r20, 0x7A	; 122
    136a:	53 e4       	ldi	r21, 0x43	; 67
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	8d 8b       	std	Y+21, r24	; 0x15
    1376:	9e 8b       	std	Y+22, r25	; 0x16
    1378:	af 8b       	std	Y+23, r26	; 0x17
    137a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    137c:	6d 89       	ldd	r22, Y+21	; 0x15
    137e:	7e 89       	ldd	r23, Y+22	; 0x16
    1380:	8f 89       	ldd	r24, Y+23	; 0x17
    1382:	98 8d       	ldd	r25, Y+24	; 0x18
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	2c f4       	brge	.+10     	; 0x139e <HCLCD_VidWriteCommand_8Bits+0x8e>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9c 8b       	std	Y+20, r25	; 0x14
    139a:	8b 8b       	std	Y+19, r24	; 0x13
    139c:	3f c0       	rjmp	.+126    	; 0x141c <HCLCD_VidWriteCommand_8Bits+0x10c>
	else if (__tmp > 65535)
    139e:	6d 89       	ldd	r22, Y+21	; 0x15
    13a0:	7e 89       	ldd	r23, Y+22	; 0x16
    13a2:	8f 89       	ldd	r24, Y+23	; 0x17
    13a4:	98 8d       	ldd	r25, Y+24	; 0x18
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	3f ef       	ldi	r19, 0xFF	; 255
    13aa:	4f e7       	ldi	r20, 0x7F	; 127
    13ac:	57 e4       	ldi	r21, 0x47	; 71
    13ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	4c f5       	brge	.+82     	; 0x1408 <HCLCD_VidWriteCommand_8Bits+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b6:	69 8d       	ldd	r22, Y+25	; 0x19
    13b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e2       	ldi	r20, 0x20	; 32
    13c4:	51 e4       	ldi	r21, 0x41	; 65
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	9c 8b       	std	Y+20, r25	; 0x14
    13dc:	8b 8b       	std	Y+19, r24	; 0x13
    13de:	0f c0       	rjmp	.+30     	; 0x13fe <HCLCD_VidWriteCommand_8Bits+0xee>
    13e0:	89 e1       	ldi	r24, 0x19	; 25
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9a 8b       	std	Y+18, r25	; 0x12
    13e6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13e8:	89 89       	ldd	r24, Y+17	; 0x11
    13ea:	9a 89       	ldd	r25, Y+18	; 0x12
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <HCLCD_VidWriteCommand_8Bits+0xdc>
    13f0:	9a 8b       	std	Y+18, r25	; 0x12
    13f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	8b 89       	ldd	r24, Y+19	; 0x13
    13f6:	9c 89       	ldd	r25, Y+20	; 0x14
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	9c 8b       	std	Y+20, r25	; 0x14
    13fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1400:	9c 89       	ldd	r25, Y+20	; 0x14
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	69 f7       	brne	.-38     	; 0x13e0 <HCLCD_VidWriteCommand_8Bits+0xd0>
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <HCLCD_VidWriteCommand_8Bits+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1408:	6d 89       	ldd	r22, Y+21	; 0x15
    140a:	7e 89       	ldd	r23, Y+22	; 0x16
    140c:	8f 89       	ldd	r24, Y+23	; 0x17
    140e:	98 8d       	ldd	r25, Y+24	; 0x18
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9c 8b       	std	Y+20, r25	; 0x14
    141a:	8b 8b       	std	Y+19, r24	; 0x13
    141c:	8b 89       	ldd	r24, Y+19	; 0x13
    141e:	9c 89       	ldd	r25, Y+20	; 0x14
    1420:	98 8b       	std	Y+16, r25	; 0x10
    1422:	8f 87       	std	Y+15, r24	; 0x0f
    1424:	8f 85       	ldd	r24, Y+15	; 0x0f
    1426:	98 89       	ldd	r25, Y+16	; 0x10
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <HCLCD_VidWriteCommand_8Bits+0x118>
    142c:	98 8b       	std	Y+16, r25	; 0x10
    142e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	62 e0       	ldi	r22, 0x02	; 2
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a0 e0       	ldi	r26, 0x00	; 0
    1440:	b0 e4       	ldi	r27, 0x40	; 64
    1442:	8b 87       	std	Y+11, r24	; 0x0b
    1444:	9c 87       	std	Y+12, r25	; 0x0c
    1446:	ad 87       	std	Y+13, r26	; 0x0d
    1448:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	6b 85       	ldd	r22, Y+11	; 0x0b
    144c:	7c 85       	ldd	r23, Y+12	; 0x0c
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a e7       	ldi	r20, 0x7A	; 122
    1458:	53 e4       	ldi	r21, 0x43	; 67
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8f 83       	std	Y+7, r24	; 0x07
    1464:	98 87       	std	Y+8, r25	; 0x08
    1466:	a9 87       	std	Y+9, r26	; 0x09
    1468:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146a:	6f 81       	ldd	r22, Y+7	; 0x07
    146c:	78 85       	ldd	r23, Y+8	; 0x08
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <HCLCD_VidWriteCommand_8Bits+0x17c>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	3f c0       	rjmp	.+126    	; 0x150a <HCLCD_VidWriteCommand_8Bits+0x1fa>
	else if (__tmp > 65535)
    148c:	6f 81       	ldd	r22, Y+7	; 0x07
    148e:	78 85       	ldd	r23, Y+8	; 0x08
    1490:	89 85       	ldd	r24, Y+9	; 0x09
    1492:	9a 85       	ldd	r25, Y+10	; 0x0a
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	4c f5       	brge	.+82     	; 0x14f6 <HCLCD_VidWriteCommand_8Bits+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <HCLCD_VidWriteCommand_8Bits+0x1dc>
    14ce:	89 e1       	ldi	r24, 0x19	; 25
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <HCLCD_VidWriteCommand_8Bits+0x1ca>
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f7       	brne	.-38     	; 0x14ce <HCLCD_VidWriteCommand_8Bits+0x1be>
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <HCLCD_VidWriteCommand_8Bits+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <HCLCD_VidWriteCommand_8Bits+0x206>
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);	
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	62 e0       	ldi	r22, 0x02	; 2
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    1528:	6d 96       	adiw	r28, 0x1d	; 29
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <HCLCD_Vid8Bits_Init>:

void HCLCD_Vid8Bits_Init(void)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	e8 97       	sbiw	r28, 0x38	; 56
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and control port intialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	6f ef       	ldi	r22, 0xFF	; 255
    1552:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_Error_State_SetPinDirection>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 ef       	ldi	r26, 0xF0	; 240
    157a:	b1 e4       	ldi	r27, 0x41	; 65
    157c:	8d ab       	std	Y+53, r24	; 0x35
    157e:	9e ab       	std	Y+54, r25	; 0x36
    1580:	af ab       	std	Y+55, r26	; 0x37
    1582:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	6d a9       	ldd	r22, Y+53	; 0x35
    1586:	7e a9       	ldd	r23, Y+54	; 0x36
    1588:	8f a9       	ldd	r24, Y+55	; 0x37
    158a:	98 ad       	ldd	r25, Y+56	; 0x38
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4a e7       	ldi	r20, 0x7A	; 122
    1592:	53 e4       	ldi	r21, 0x43	; 67
    1594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	89 ab       	std	Y+49, r24	; 0x31
    159e:	9a ab       	std	Y+50, r25	; 0x32
    15a0:	ab ab       	std	Y+51, r26	; 0x33
    15a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15a4:	69 a9       	ldd	r22, Y+49	; 0x31
    15a6:	7a a9       	ldd	r23, Y+50	; 0x32
    15a8:	8b a9       	ldd	r24, Y+51	; 0x33
    15aa:	9c a9       	ldd	r25, Y+52	; 0x34
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	98 ab       	std	Y+48, r25	; 0x30
    15c2:	8f a7       	std	Y+47, r24	; 0x2f
    15c4:	3f c0       	rjmp	.+126    	; 0x1644 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    15c6:	69 a9       	ldd	r22, Y+49	; 0x31
    15c8:	7a a9       	ldd	r23, Y+50	; 0x32
    15ca:	8b a9       	ldd	r24, Y+51	; 0x33
    15cc:	9c a9       	ldd	r25, Y+52	; 0x34
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	4c f5       	brge	.+82     	; 0x1630 <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	6d a9       	ldd	r22, Y+53	; 0x35
    15e0:	7e a9       	ldd	r23, Y+54	; 0x36
    15e2:	8f a9       	ldd	r24, Y+55	; 0x37
    15e4:	98 ad       	ldd	r25, Y+56	; 0x38
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	98 ab       	std	Y+48, r25	; 0x30
    1604:	8f a7       	std	Y+47, r24	; 0x2f
    1606:	0f c0       	rjmp	.+30     	; 0x1626 <HCLCD_Vid8Bits_Init+0xec>
    1608:	89 e1       	ldi	r24, 0x19	; 25
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9e a7       	std	Y+46, r25	; 0x2e
    160e:	8d a7       	std	Y+45, r24	; 0x2d
    1610:	8d a5       	ldd	r24, Y+45	; 0x2d
    1612:	9e a5       	ldd	r25, Y+46	; 0x2e
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <HCLCD_Vid8Bits_Init+0xda>
    1618:	9e a7       	std	Y+46, r25	; 0x2e
    161a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	8f a5       	ldd	r24, Y+47	; 0x2f
    161e:	98 a9       	ldd	r25, Y+48	; 0x30
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	98 ab       	std	Y+48, r25	; 0x30
    1624:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1626:	8f a5       	ldd	r24, Y+47	; 0x2f
    1628:	98 a9       	ldd	r25, Y+48	; 0x30
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	69 f7       	brne	.-38     	; 0x1608 <HCLCD_Vid8Bits_Init+0xce>
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1630:	69 a9       	ldd	r22, Y+49	; 0x31
    1632:	7a a9       	ldd	r23, Y+50	; 0x32
    1634:	8b a9       	ldd	r24, Y+51	; 0x33
    1636:	9c a9       	ldd	r25, Y+52	; 0x34
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	98 ab       	std	Y+48, r25	; 0x30
    1642:	8f a7       	std	Y+47, r24	; 0x2f
    1644:	8f a5       	ldd	r24, Y+47	; 0x2f
    1646:	98 a9       	ldd	r25, Y+48	; 0x30
    1648:	9c a7       	std	Y+44, r25	; 0x2c
    164a:	8b a7       	std	Y+43, r24	; 0x2b
    164c:	8b a5       	ldd	r24, Y+43	; 0x2b
    164e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <HCLCD_Vid8Bits_Init+0x116>
    1654:	9c a7       	std	Y+44, r25	; 0x2c
    1656:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_FUNCTION_SET);
    1658:	88 e3       	ldi	r24, 0x38	; 56
    165a:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a0 e8       	ldi	r26, 0x80	; 128
    1664:	bf e3       	ldi	r27, 0x3F	; 63
    1666:	8f a3       	std	Y+39, r24	; 0x27
    1668:	98 a7       	std	Y+40, r25	; 0x28
    166a:	a9 a7       	std	Y+41, r26	; 0x29
    166c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166e:	6f a1       	ldd	r22, Y+39	; 0x27
    1670:	78 a5       	ldd	r23, Y+40	; 0x28
    1672:	89 a5       	ldd	r24, Y+41	; 0x29
    1674:	9a a5       	ldd	r25, Y+42	; 0x2a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4a e7       	ldi	r20, 0x7A	; 122
    167c:	53 e4       	ldi	r21, 0x43	; 67
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8b a3       	std	Y+35, r24	; 0x23
    1688:	9c a3       	std	Y+36, r25	; 0x24
    168a:	ad a3       	std	Y+37, r26	; 0x25
    168c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    168e:	6b a1       	ldd	r22, Y+35	; 0x23
    1690:	7c a1       	ldd	r23, Y+36	; 0x24
    1692:	8d a1       	ldd	r24, Y+37	; 0x25
    1694:	9e a1       	ldd	r25, Y+38	; 0x26
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9a a3       	std	Y+34, r25	; 0x22
    16ac:	89 a3       	std	Y+33, r24	; 0x21
    16ae:	3f c0       	rjmp	.+126    	; 0x172e <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    16b0:	6b a1       	ldd	r22, Y+35	; 0x23
    16b2:	7c a1       	ldd	r23, Y+36	; 0x24
    16b4:	8d a1       	ldd	r24, Y+37	; 0x25
    16b6:	9e a1       	ldd	r25, Y+38	; 0x26
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	3f ef       	ldi	r19, 0xFF	; 255
    16bc:	4f e7       	ldi	r20, 0x7F	; 127
    16be:	57 e4       	ldi	r21, 0x47	; 71
    16c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c4:	18 16       	cp	r1, r24
    16c6:	4c f5       	brge	.+82     	; 0x171a <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c8:	6f a1       	ldd	r22, Y+39	; 0x27
    16ca:	78 a5       	ldd	r23, Y+40	; 0x28
    16cc:	89 a5       	ldd	r24, Y+41	; 0x29
    16ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e2       	ldi	r20, 0x20	; 32
    16d6:	51 e4       	ldi	r21, 0x41	; 65
    16d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9a a3       	std	Y+34, r25	; 0x22
    16ee:	89 a3       	std	Y+33, r24	; 0x21
    16f0:	0f c0       	rjmp	.+30     	; 0x1710 <HCLCD_Vid8Bits_Init+0x1d6>
    16f2:	89 e1       	ldi	r24, 0x19	; 25
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	98 a3       	std	Y+32, r25	; 0x20
    16f8:	8f 8f       	std	Y+31, r24	; 0x1f
    16fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16fc:	98 a1       	ldd	r25, Y+32	; 0x20
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <HCLCD_Vid8Bits_Init+0x1c4>
    1702:	98 a3       	std	Y+32, r25	; 0x20
    1704:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1706:	89 a1       	ldd	r24, Y+33	; 0x21
    1708:	9a a1       	ldd	r25, Y+34	; 0x22
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1710:	89 a1       	ldd	r24, Y+33	; 0x21
    1712:	9a a1       	ldd	r25, Y+34	; 0x22
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	69 f7       	brne	.-38     	; 0x16f2 <HCLCD_Vid8Bits_Init+0x1b8>
    1718:	14 c0       	rjmp	.+40     	; 0x1742 <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171a:	6b a1       	ldd	r22, Y+35	; 0x23
    171c:	7c a1       	ldd	r23, Y+36	; 0x24
    171e:	8d a1       	ldd	r24, Y+37	; 0x25
    1720:	9e a1       	ldd	r25, Y+38	; 0x26
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9a a3       	std	Y+34, r25	; 0x22
    172c:	89 a3       	std	Y+33, r24	; 0x21
    172e:	89 a1       	ldd	r24, Y+33	; 0x21
    1730:	9a a1       	ldd	r25, Y+34	; 0x22
    1732:	9e 8f       	std	Y+30, r25	; 0x1e
    1734:	8d 8f       	std	Y+29, r24	; 0x1d
    1736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1738:	9e 8d       	ldd	r25, Y+30	; 0x1e
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <HCLCD_Vid8Bits_Init+0x200>
    173e:	9e 8f       	std	Y+30, r25	; 0x1e
    1740:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_DISPLAY_ON_OFF);
    1742:	8f e0       	ldi	r24, 0x0F	; 15
    1744:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a0 e8       	ldi	r26, 0x80	; 128
    174e:	bf e3       	ldi	r27, 0x3F	; 63
    1750:	89 8f       	std	Y+25, r24	; 0x19
    1752:	9a 8f       	std	Y+26, r25	; 0x1a
    1754:	ab 8f       	std	Y+27, r26	; 0x1b
    1756:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1758:	69 8d       	ldd	r22, Y+25	; 0x19
    175a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    175e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	4a e7       	ldi	r20, 0x7A	; 122
    1766:	53 e4       	ldi	r21, 0x43	; 67
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8d 8b       	std	Y+21, r24	; 0x15
    1772:	9e 8b       	std	Y+22, r25	; 0x16
    1774:	af 8b       	std	Y+23, r26	; 0x17
    1776:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1778:	6d 89       	ldd	r22, Y+21	; 0x15
    177a:	7e 89       	ldd	r23, Y+22	; 0x16
    177c:	8f 89       	ldd	r24, Y+23	; 0x17
    177e:	98 8d       	ldd	r25, Y+24	; 0x18
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e8       	ldi	r20, 0x80	; 128
    1786:	5f e3       	ldi	r21, 0x3F	; 63
    1788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178c:	88 23       	and	r24, r24
    178e:	2c f4       	brge	.+10     	; 0x179a <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9c 8b       	std	Y+20, r25	; 0x14
    1796:	8b 8b       	std	Y+19, r24	; 0x13
    1798:	3f c0       	rjmp	.+126    	; 0x1818 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    179a:	6d 89       	ldd	r22, Y+21	; 0x15
    179c:	7e 89       	ldd	r23, Y+22	; 0x16
    179e:	8f 89       	ldd	r24, Y+23	; 0x17
    17a0:	98 8d       	ldd	r25, Y+24	; 0x18
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	57 e4       	ldi	r21, 0x47	; 71
    17aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ae:	18 16       	cp	r1, r24
    17b0:	4c f5       	brge	.+82     	; 0x1804 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b2:	69 8d       	ldd	r22, Y+25	; 0x19
    17b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e2       	ldi	r20, 0x20	; 32
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9c 8b       	std	Y+20, r25	; 0x14
    17d8:	8b 8b       	std	Y+19, r24	; 0x13
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <HCLCD_Vid8Bits_Init+0x2c0>
    17dc:	89 e1       	ldi	r24, 0x19	; 25
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9a 8b       	std	Y+18, r25	; 0x12
    17e2:	89 8b       	std	Y+17, r24	; 0x11
    17e4:	89 89       	ldd	r24, Y+17	; 0x11
    17e6:	9a 89       	ldd	r25, Y+18	; 0x12
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <HCLCD_Vid8Bits_Init+0x2ae>
    17ec:	9a 8b       	std	Y+18, r25	; 0x12
    17ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f0:	8b 89       	ldd	r24, Y+19	; 0x13
    17f2:	9c 89       	ldd	r25, Y+20	; 0x14
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	9c 8b       	std	Y+20, r25	; 0x14
    17f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	8b 89       	ldd	r24, Y+19	; 0x13
    17fc:	9c 89       	ldd	r25, Y+20	; 0x14
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	69 f7       	brne	.-38     	; 0x17dc <HCLCD_Vid8Bits_Init+0x2a2>
    1802:	14 c0       	rjmp	.+40     	; 0x182c <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	6d 89       	ldd	r22, Y+21	; 0x15
    1806:	7e 89       	ldd	r23, Y+22	; 0x16
    1808:	8f 89       	ldd	r24, Y+23	; 0x17
    180a:	98 8d       	ldd	r25, Y+24	; 0x18
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9c 8b       	std	Y+20, r25	; 0x14
    1816:	8b 8b       	std	Y+19, r24	; 0x13
    1818:	8b 89       	ldd	r24, Y+19	; 0x13
    181a:	9c 89       	ldd	r25, Y+20	; 0x14
    181c:	98 8b       	std	Y+16, r25	; 0x10
    181e:	8f 87       	std	Y+15, r24	; 0x0f
    1820:	8f 85       	ldd	r24, Y+15	; 0x0f
    1822:	98 89       	ldd	r25, Y+16	; 0x10
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <HCLCD_Vid8Bits_Init+0x2ea>
    1828:	98 8b       	std	Y+16, r25	; 0x10
    182a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_VidWriteCommand_8Bits(DISPLAY_CLEAR);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e0       	ldi	r26, 0x00	; 0
    1838:	b0 e4       	ldi	r27, 0x40	; 64
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	9c 87       	std	Y+12, r25	; 0x0c
    183e:	ad 87       	std	Y+13, r26	; 0x0d
    1840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a e7       	ldi	r20, 0x7A	; 122
    1850:	53 e4       	ldi	r21, 0x43	; 67
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	98 87       	std	Y+8, r25	; 0x08
    185e:	a9 87       	std	Y+9, r26	; 0x09
    1860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <HCLCD_Vid8Bits_Init+0x3aa>
    18c6:	89 e1       	ldi	r24, 0x19	; 25
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <HCLCD_Vid8Bits_Init+0x398>
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <HCLCD_Vid8Bits_Init+0x38c>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <HCLCD_Vid8Bits_Init+0x3d4>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_ENTRY_MODE_SET);
    1916:	86 e0       	ldi	r24, 0x06	; 6
    1918:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>
}
    191c:	e8 96       	adiw	r28, 0x38	; 56
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <HCLCD_VidWriteChar_8Bits>:
void HCLCD_VidWriteChar_8Bits(u8 Copy_u8Data)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	6d 97       	sbiw	r28, 0x1d	; 29
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select Data register--> Write one on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	62 e0       	ldi	r22, 0x02	; 2
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    1958:	83 e0       	ldi	r24, 0x03	; 3
    195a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    195c:	0e 94 f9 07 	call	0xff2	; 0xff2 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e0       	ldi	r26, 0x00	; 0
    1970:	b0 e4       	ldi	r27, 0x40	; 64
    1972:	89 8f       	std	Y+25, r24	; 0x19
    1974:	9a 8f       	std	Y+26, r25	; 0x1a
    1976:	ab 8f       	std	Y+27, r26	; 0x1b
    1978:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197a:	69 8d       	ldd	r22, Y+25	; 0x19
    197c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1980:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a e7       	ldi	r20, 0x7A	; 122
    1988:	53 e4       	ldi	r21, 0x43	; 67
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8d 8b       	std	Y+21, r24	; 0x15
    1994:	9e 8b       	std	Y+22, r25	; 0x16
    1996:	af 8b       	std	Y+23, r26	; 0x17
    1998:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    199a:	6d 89       	ldd	r22, Y+21	; 0x15
    199c:	7e 89       	ldd	r23, Y+22	; 0x16
    199e:	8f 89       	ldd	r24, Y+23	; 0x17
    19a0:	98 8d       	ldd	r25, Y+24	; 0x18
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <HCLCD_VidWriteChar_8Bits+0x8e>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9c 8b       	std	Y+20, r25	; 0x14
    19b8:	8b 8b       	std	Y+19, r24	; 0x13
    19ba:	3f c0       	rjmp	.+126    	; 0x1a3a <HCLCD_VidWriteChar_8Bits+0x10c>
	else if (__tmp > 65535)
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	4c f5       	brge	.+82     	; 0x1a26 <HCLCD_VidWriteChar_8Bits+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	69 8d       	ldd	r22, Y+25	; 0x19
    19d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e2       	ldi	r20, 0x20	; 32
    19e2:	51 e4       	ldi	r21, 0x41	; 65
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	9c 8b       	std	Y+20, r25	; 0x14
    19fa:	8b 8b       	std	Y+19, r24	; 0x13
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <HCLCD_VidWriteChar_8Bits+0xee>
    19fe:	89 e1       	ldi	r24, 0x19	; 25
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9a 8b       	std	Y+18, r25	; 0x12
    1a04:	89 8b       	std	Y+17, r24	; 0x11
    1a06:	89 89       	ldd	r24, Y+17	; 0x11
    1a08:	9a 89       	ldd	r25, Y+18	; 0x12
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <HCLCD_VidWriteChar_8Bits+0xdc>
    1a0e:	9a 8b       	std	Y+18, r25	; 0x12
    1a10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	8b 89       	ldd	r24, Y+19	; 0x13
    1a14:	9c 89       	ldd	r25, Y+20	; 0x14
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	9c 8b       	std	Y+20, r25	; 0x14
    1a1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f7       	brne	.-38     	; 0x19fe <HCLCD_VidWriteChar_8Bits+0xd0>
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <HCLCD_VidWriteChar_8Bits+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a26:	6d 89       	ldd	r22, Y+21	; 0x15
    1a28:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9c 8b       	std	Y+20, r25	; 0x14
    1a38:	8b 8b       	std	Y+19, r24	; 0x13
    1a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3e:	98 8b       	std	Y+16, r25	; 0x10
    1a40:	8f 87       	std	Y+15, r24	; 0x0f
    1a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a44:	98 89       	ldd	r25, Y+16	; 0x10
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <HCLCD_VidWriteChar_8Bits+0x118>
    1a4a:	98 8b       	std	Y+16, r25	; 0x10
    1a4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	62 e0       	ldi	r22, 0x02	; 2
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e0       	ldi	r26, 0x00	; 0
    1a5e:	b0 e4       	ldi	r27, 0x40	; 64
    1a60:	8b 87       	std	Y+11, r24	; 0x0b
    1a62:	9c 87       	std	Y+12, r25	; 0x0c
    1a64:	ad 87       	std	Y+13, r26	; 0x0d
    1a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a e7       	ldi	r20, 0x7A	; 122
    1a76:	53 e4       	ldi	r21, 0x43	; 67
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8f 83       	std	Y+7, r24	; 0x07
    1a82:	98 87       	std	Y+8, r25	; 0x08
    1a84:	a9 87       	std	Y+9, r26	; 0x09
    1a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a88:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8a:	78 85       	ldd	r23, Y+8	; 0x08
    1a8c:	89 85       	ldd	r24, Y+9	; 0x09
    1a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <HCLCD_VidWriteChar_8Bits+0x17c>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <HCLCD_VidWriteChar_8Bits+0x1fa>
	else if (__tmp > 65535)
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <HCLCD_VidWriteChar_8Bits+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <HCLCD_VidWriteChar_8Bits+0x1dc>
    1aec:	89 e1       	ldi	r24, 0x19	; 25
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <HCLCD_VidWriteChar_8Bits+0x1ca>
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <HCLCD_VidWriteChar_8Bits+0x1be>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <HCLCD_VidWriteChar_8Bits+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6f 81       	ldd	r22, Y+7	; 0x07
    1b16:	78 85       	ldd	r23, Y+8	; 0x08
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <HCLCD_VidWriteChar_8Bits+0x206>
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);	
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	62 e0       	ldi	r22, 0x02	; 2
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 f6 06 	call	0xdec	; 0xdec <MDIO_Error_State_SetPinValue>
}
    1b46:	6d 96       	adiw	r28, 0x1d	; 29
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <HCLCD_VidWriteString_8Bits>:

void HCLCD_VidWriteString_8Bits(u8* PCopy_u8String)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <HCLCD_VidWriteString_8Bits+0x6>
    1b5e:	0f 92       	push	r0
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	9b 83       	std	Y+3, r25	; 0x03
    1b66:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    1b68:	19 82       	std	Y+1, r1	; 0x01
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <HCLCD_VidWriteString_8Bits+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_VidWriteChar_8Bits(PCopy_u8String[Loc_u8Count]);
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	9b 81       	ldd	r25, Y+3	; 0x03
    1b76:	fc 01       	movw	r30, r24
    1b78:	e2 0f       	add	r30, r18
    1b7a:	f3 1f       	adc	r31, r19
    1b7c:	80 81       	ld	r24, Z
    1b7e:	0e 94 97 0c 	call	0x192e	; 0x192e <HCLCD_VidWriteChar_8Bits>
		Loc_u8Count++;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	89 83       	std	Y+1, r24	; 0x01
}

void HCLCD_VidWriteString_8Bits(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	fc 01       	movw	r30, r24
    1b94:	e2 0f       	add	r30, r18
    1b96:	f3 1f       	adc	r31, r19
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 23       	and	r24, r24
    1b9c:	39 f7       	brne	.-50     	; 0x1b6c <HCLCD_VidWriteString_8Bits+0x14>
	{
		HCLCD_VidWriteChar_8Bits(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <HCLCD_VidWriteNumber_8Bits>:
void HCLCD_VidWriteNumber_8Bits(u32 Copy_u8Number)
{
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	6a 97       	sbiw	r28, 0x1a	; 26
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	6f 8b       	std	Y+23, r22	; 0x17
    1bc4:	78 8f       	std	Y+24, r23	; 0x18
    1bc6:	89 8f       	std	Y+25, r24	; 0x19
    1bc8:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 ARR_Digits[20];
	u8 LOC_Count=0;
    1bca:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    1bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bce:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd0:	a9 8d       	ldd	r26, Y+25	; 0x19
    1bd2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	a1 05       	cpc	r26, r1
    1bd8:	b1 05       	cpc	r27, r1
    1bda:	09 f4       	brne	.+2      	; 0x1bde <HCLCD_VidWriteNumber_8Bits+0x34>
    1bdc:	4f c0       	rjmp	.+158    	; 0x1c7c <HCLCD_VidWriteNumber_8Bits+0xd2>
    1bde:	2d c0       	rjmp	.+90     	; 0x1c3a <HCLCD_VidWriteNumber_8Bits+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	08 2f       	mov	r16, r24
    1be4:	10 e0       	ldi	r17, 0x00	; 0
    1be6:	8f 89       	ldd	r24, Y+23	; 0x17
    1be8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bea:	a9 8d       	ldd	r26, Y+25	; 0x19
    1bec:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1bee:	2a e0       	ldi	r18, 0x0A	; 10
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	28 2f       	mov	r18, r24
    1c04:	ce 01       	movw	r24, r28
    1c06:	03 96       	adiw	r24, 0x03	; 3
    1c08:	fc 01       	movw	r30, r24
    1c0a:	e0 0f       	add	r30, r16
    1c0c:	f1 1f       	adc	r31, r17
    1c0e:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c16:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c18:	2a e0       	ldi	r18, 0x0A	; 10
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
    1c28:	da 01       	movw	r26, r20
    1c2a:	c9 01       	movw	r24, r18
    1c2c:	8f 8b       	std	Y+23, r24	; 0x17
    1c2e:	98 8f       	std	Y+24, r25	; 0x18
    1c30:	a9 8f       	std	Y+25, r26	; 0x19
    1c32:	ba 8f       	std	Y+26, r27	; 0x1a
			LOC_Count++;
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	8f 5f       	subi	r24, 0xFF	; 255
    1c38:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[20];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    1c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c40:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	a1 05       	cpc	r26, r1
    1c46:	b1 05       	cpc	r27, r1
    1c48:	59 f6       	brne	.-106    	; 0x1be0 <HCLCD_VidWriteNumber_8Bits+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	81 50       	subi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	11 c0       	rjmp	.+34     	; 0x1c74 <HCLCD_VidWriteNumber_8Bits+0xca>
		{
			HCLCD_VidWriteChar_8Bits(ARR_Digits[i]+'0');
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	28 2f       	mov	r18, r24
    1c56:	33 27       	eor	r19, r19
    1c58:	27 fd       	sbrc	r18, 7
    1c5a:	30 95       	com	r19
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	03 96       	adiw	r24, 0x03	; 3
    1c60:	fc 01       	movw	r30, r24
    1c62:	e2 0f       	add	r30, r18
    1c64:	f3 1f       	adc	r31, r19
    1c66:	80 81       	ld	r24, Z
    1c68:	80 5d       	subi	r24, 0xD0	; 208
    1c6a:	0e 94 97 0c 	call	0x192e	; 0x192e <HCLCD_VidWriteChar_8Bits>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	81 50       	subi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	88 23       	and	r24, r24
    1c78:	64 f7       	brge	.-40     	; 0x1c52 <HCLCD_VidWriteNumber_8Bits+0xa8>
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <HCLCD_VidWriteNumber_8Bits+0xd8>
			HCLCD_VidWriteChar_8Bits(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_VidWriteChar_8Bits('0');
    1c7c:	80 e3       	ldi	r24, 0x30	; 48
    1c7e:	0e 94 97 0c 	call	0x192e	; 0x192e <HCLCD_VidWriteChar_8Bits>
	}
}
    1c82:	6a 96       	adiw	r28, 0x1a	; 26
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <HCLCD_VidSetPosition>:
void HCLCD_VidSetPosition(u8 Copy_u8LineNumber , u8 Copy_u8PositionNumber)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <HCLCD_VidSetPosition+0x6>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	41 f4       	brne	.+16     	; 0x1cbc <HCLCD_VidSetPosition+0x24>
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	80 31       	cpi	r24, 0x10	; 16
    1cb0:	28 f4       	brcc	.+10     	; 0x1cbc <HCLCD_VidSetPosition+0x24>
	{
		HCLCD_VidWriteCommand_8Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 58       	subi	r24, 0x80	; 128
    1cb6:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>
    1cba:	0a c0       	rjmp	.+20     	; 0x1cd0 <HCLCD_VidSetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	82 30       	cpi	r24, 0x02	; 2
    1cc0:	39 f4       	brne	.+14     	; 0x1cd0 <HCLCD_VidSetPosition+0x38>
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	80 31       	cpi	r24, 0x10	; 16
    1cc6:	20 f4       	brcc	.+8      	; 0x1cd0 <HCLCD_VidSetPosition+0x38>
	{
		HCLCD_VidWriteCommand_8Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	80 54       	subi	r24, 0x40	; 64
    1ccc:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>
	}
	else
	{
		/*Do Nothing*/
	}
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <HKPD_U8Calculator>:
 u8 Count_Digit_Prametar=0 ;
 //Number of Math Operators of Operation
 u8 Count_Math_Operators=0 ;
 //Final Result of Operation
 u32 Result=0 ;
u32 HKPD_U8Calculator(u8 Copy_U8Calculate_Result){
    1cda:	cf 92       	push	r12
    1cdc:	df 92       	push	r13
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	2e 97       	sbiw	r28, 0x0e	; 14
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	8c 87       	std	Y+12, r24	; 0x0c

	if(Copy_U8Calculate_Result=='C'){
    1cfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cfe:	83 34       	cpi	r24, 0x43	; 67
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <HKPD_U8Calculator+0x2a>
    1d02:	16 c2       	rjmp	.+1068   	; 0x2130 <HKPD_U8Calculator+0x456>
	}
	else if (Copy_U8Calculate_Result=='='||(Copy_U8Calculate_Result=='+')||(Copy_U8Calculate_Result=='-')||(Copy_U8Calculate_Result=='/')||(Copy_U8Calculate_Result=='*')){
    1d04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d06:	8d 33       	cpi	r24, 0x3D	; 61
    1d08:	69 f0       	breq	.+26     	; 0x1d24 <HKPD_U8Calculator+0x4a>
    1d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d0c:	8b 32       	cpi	r24, 0x2B	; 43
    1d0e:	51 f0       	breq	.+20     	; 0x1d24 <HKPD_U8Calculator+0x4a>
    1d10:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d12:	8d 32       	cpi	r24, 0x2D	; 45
    1d14:	39 f0       	breq	.+14     	; 0x1d24 <HKPD_U8Calculator+0x4a>
    1d16:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d18:	8f 32       	cpi	r24, 0x2F	; 47
    1d1a:	21 f0       	breq	.+8      	; 0x1d24 <HKPD_U8Calculator+0x4a>
    1d1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d1e:	8a 32       	cpi	r24, 0x2A	; 42
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <HKPD_U8Calculator+0x4a>
    1d22:	f7 c1       	rjmp	.+1006   	; 0x2112 <HKPD_U8Calculator+0x438>
		 u32 Prametar=0 ;
    1d24:	18 86       	std	Y+8, r1	; 0x08
    1d26:	19 86       	std	Y+9, r1	; 0x09
    1d28:	1a 86       	std	Y+10, r1	; 0x0a
    1d2a:	1b 86       	std	Y+11, r1	; 0x0b

						for(u8 i=0 ;i<Count_Digit_Prametar;i++){
    1d2c:	1f 82       	std	Y+7, r1	; 0x07
    1d2e:	4e c0       	rjmp	.+156    	; 0x1dcc <HKPD_U8Calculator+0xf2>
							u8 Power=0 ;
    1d30:	1e 82       	std	Y+6, r1	; 0x06
							u32 Power_Result =1 ;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a0 e0       	ldi	r26, 0x00	; 0
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    1d3c:	9b 83       	std	Y+3, r25	; 0x03
    1d3e:	ac 83       	std	Y+4, r26	; 0x04
    1d40:	bd 83       	std	Y+5, r27	; 0x05
							// so 225 => P[0]=2 ==> power= 3-1-0 for first i = 2 ==> so 2 will be 200
							Power=(Count_Digit_Prametar-1)-i;
    1d42:	90 91 95 00 	lds	r25, 0x0095
    1d46:	8f 81       	ldd	r24, Y+7	; 0x07
    1d48:	29 2f       	mov	r18, r25
    1d4a:	28 1b       	sub	r18, r24
    1d4c:	82 2f       	mov	r24, r18
    1d4e:	81 50       	subi	r24, 0x01	; 1
    1d50:	8e 83       	std	Y+6, r24	; 0x06
    1d52:	15 c0       	rjmp	.+42     	; 0x1d7e <HKPD_U8Calculator+0xa4>
						    while (Power != 0) {
						    	Power_Result *= 10;
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	ac 81       	ldd	r26, Y+4	; 0x04
    1d5a:	bd 81       	ldd	r27, Y+5	; 0x05
    1d5c:	2a e0       	ldi	r18, 0x0A	; 10
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__mulsi3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8a 83       	std	Y+2, r24	; 0x02
    1d72:	9b 83       	std	Y+3, r25	; 0x03
    1d74:	ac 83       	std	Y+4, r26	; 0x04
    1d76:	bd 83       	std	Y+5, r27	; 0x05
						        --Power;
    1d78:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	8e 83       	std	Y+6, r24	; 0x06
						for(u8 i=0 ;i<Count_Digit_Prametar;i++){
							u8 Power=0 ;
							u32 Power_Result =1 ;
							// so 225 => P[0]=2 ==> power= 3-1-0 for first i = 2 ==> so 2 will be 200
							Power=(Count_Digit_Prametar-1)-i;
						    while (Power != 0) {
    1d7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d80:	88 23       	and	r24, r24
    1d82:	41 f7       	brne	.-48     	; 0x1d54 <HKPD_U8Calculator+0x7a>
						    	Power_Result *= 10;
						        --Power;
						    }
							Prametar+=((Prametar_Digit[i])*(Power_Result));
    1d84:	8f 81       	ldd	r24, Y+7	; 0x07
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	ed 53       	subi	r30, 0x3D	; 61
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a0 e0       	ldi	r26, 0x00	; 0
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d9c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d9e:	4c 81       	ldd	r20, Y+4	; 0x04
    1da0:	5d 81       	ldd	r21, Y+5	; 0x05
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__mulsi3>
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	88 85       	ldd	r24, Y+8	; 0x08
    1db0:	99 85       	ldd	r25, Y+9	; 0x09
    1db2:	aa 85       	ldd	r26, Y+10	; 0x0a
    1db4:	bb 85       	ldd	r27, Y+11	; 0x0b
    1db6:	82 0f       	add	r24, r18
    1db8:	93 1f       	adc	r25, r19
    1dba:	a4 1f       	adc	r26, r20
    1dbc:	b5 1f       	adc	r27, r21
    1dbe:	88 87       	std	Y+8, r24	; 0x08
    1dc0:	99 87       	std	Y+9, r25	; 0x09
    1dc2:	aa 87       	std	Y+10, r26	; 0x0a
    1dc4:	bb 87       	std	Y+11, r27	; 0x0b
	if(Copy_U8Calculate_Result=='C'){
	}
	else if (Copy_U8Calculate_Result=='='||(Copy_U8Calculate_Result=='+')||(Copy_U8Calculate_Result=='-')||(Copy_U8Calculate_Result=='/')||(Copy_U8Calculate_Result=='*')){
		 u32 Prametar=0 ;

						for(u8 i=0 ;i<Count_Digit_Prametar;i++){
    1dc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	8f 83       	std	Y+7, r24	; 0x07
    1dcc:	90 91 95 00 	lds	r25, 0x0095
    1dd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd2:	89 17       	cp	r24, r25
    1dd4:	08 f4       	brcc	.+2      	; 0x1dd8 <HKPD_U8Calculator+0xfe>
    1dd6:	ac cf       	rjmp	.-168    	; 0x1d30 <HKPD_U8Calculator+0x56>
						        --Power;
						    }
							Prametar+=((Prametar_Digit[i])*(Power_Result));
						}

						Prametars[Count_Prametars]=Prametar;
    1dd8:	80 91 94 00 	lds	r24, 0x0094
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	fc 01       	movw	r30, r24
    1dea:	e5 56       	subi	r30, 0x65	; 101
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	88 85       	ldd	r24, Y+8	; 0x08
    1df0:	99 85       	ldd	r25, Y+9	; 0x09
    1df2:	aa 85       	ldd	r26, Y+10	; 0x0a
    1df4:	bb 85       	ldd	r27, Y+11	; 0x0b
    1df6:	80 83       	st	Z, r24
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	a2 83       	std	Z+2, r26	; 0x02
    1dfc:	b3 83       	std	Z+3, r27	; 0x03
						Count_Prametars++;
    1dfe:	80 91 94 00 	lds	r24, 0x0094
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	80 93 94 00 	sts	0x0094, r24

						Math_Parameters[Count_Math_Operators]=Copy_U8Calculate_Result;
    1e08:	80 91 96 00 	lds	r24, 0x0096
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	fc 01       	movw	r30, r24
    1e12:	e3 53       	subi	r30, 0x33	; 51
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e18:	80 83       	st	Z, r24
						Count_Math_Operators++;
    1e1a:	80 91 96 00 	lds	r24, 0x0096
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	80 93 96 00 	sts	0x0096, r24

						Count_Digit_Prametar=0 ;
    1e24:	10 92 95 00 	sts	0x0095, r1

						if(Copy_U8Calculate_Result=='='){
    1e28:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e2a:	8d 33       	cpi	r24, 0x3D	; 61
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <HKPD_U8Calculator+0x156>
    1e2e:	80 c1       	rjmp	.+768    	; 0x2130 <HKPD_U8Calculator+0x456>

							for(u8 i=0 ;i<Count_Math_Operators-1 ;i++){
    1e30:	19 82       	std	Y+1, r1	; 0x01
    1e32:	62 c1       	rjmp	.+708    	; 0x20f8 <HKPD_U8Calculator+0x41e>

										switch (Math_Parameters[i])
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	e3 53       	subi	r30, 0x33	; 51
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	3e 87       	std	Y+14, r19	; 0x0e
    1e48:	2d 87       	std	Y+13, r18	; 0x0d
    1e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4e:	8b 32       	cpi	r24, 0x2B	; 43
    1e50:	91 05       	cpc	r25, r1
    1e52:	c9 f0       	breq	.+50     	; 0x1e86 <HKPD_U8Calculator+0x1ac>
    1e54:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e56:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e58:	2c 32       	cpi	r18, 0x2C	; 44
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	3c f4       	brge	.+14     	; 0x1e6c <HKPD_U8Calculator+0x192>
    1e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e62:	8a 32       	cpi	r24, 0x2A	; 42
    1e64:	91 05       	cpc	r25, r1
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <HKPD_U8Calculator+0x190>
    1e68:	f7 c0       	rjmp	.+494    	; 0x2058 <HKPD_U8Calculator+0x37e>
    1e6a:	43 c1       	rjmp	.+646    	; 0x20f2 <HKPD_U8Calculator+0x418>
    1e6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e70:	2d 32       	cpi	r18, 0x2D	; 45
    1e72:	31 05       	cpc	r19, r1
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <HKPD_U8Calculator+0x19e>
    1e76:	52 c0       	rjmp	.+164    	; 0x1f1c <HKPD_U8Calculator+0x242>
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	8f 32       	cpi	r24, 0x2F	; 47
    1e7e:	91 05       	cpc	r25, r1
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <HKPD_U8Calculator+0x1aa>
    1e82:	9a c0       	rjmp	.+308    	; 0x1fb8 <HKPD_U8Calculator+0x2de>
    1e84:	36 c1       	rjmp	.+620    	; 0x20f2 <HKPD_U8Calculator+0x418>
										{
										case '+':
											Prametars[i+1]=(Prametars[i]+Prametars[i+1]);
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	6f 5f       	subi	r22, 0xFF	; 255
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e5 56       	subi	r30, 0x65	; 101
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	20 81       	ld	r18, Z
    1ea8:	31 81       	ldd	r19, Z+1	; 0x01
    1eaa:	42 81       	ldd	r20, Z+2	; 0x02
    1eac:	53 81       	ldd	r21, Z+3	; 0x03
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	01 96       	adiw	r24, 0x01	; 1
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e5 56       	subi	r30, 0x65	; 101
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	a2 81       	ldd	r26, Z+2	; 0x02
    1eca:	b3 81       	ldd	r27, Z+3	; 0x03
    1ecc:	28 0f       	add	r18, r24
    1ece:	39 1f       	adc	r19, r25
    1ed0:	4a 1f       	adc	r20, r26
    1ed2:	5b 1f       	adc	r21, r27
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e5 56       	subi	r30, 0x65	; 101
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	20 83       	st	Z, r18
    1ee6:	31 83       	std	Z+1, r19	; 0x01
    1ee8:	42 83       	std	Z+2, r20	; 0x02
    1eea:	53 83       	std	Z+3, r21	; 0x03
											Result=Prametars[i+1];
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	fc 01       	movw	r30, r24
    1efe:	e5 56       	subi	r30, 0x65	; 101
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	a2 81       	ldd	r26, Z+2	; 0x02
    1f08:	b3 81       	ldd	r27, Z+3	; 0x03
    1f0a:	80 93 97 00 	sts	0x0097, r24
    1f0e:	90 93 98 00 	sts	0x0098, r25
    1f12:	a0 93 99 00 	sts	0x0099, r26
    1f16:	b0 93 9a 00 	sts	0x009A, r27
    1f1a:	eb c0       	rjmp	.+470    	; 0x20f2 <HKPD_U8Calculator+0x418>
											break ;
										case '-':
											Prametars[i+1]=(Prametars[i]*Prametars[i+1]);
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	6c 01       	movw	r12, r24
    1f24:	08 94       	sec
    1f26:	c1 1c       	adc	r12, r1
    1f28:	d1 1c       	adc	r13, r1
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	fc 01       	movw	r30, r24
    1f3a:	e5 56       	subi	r30, 0x65	; 101
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	e0 80       	ld	r14, Z
    1f40:	f1 80       	ldd	r15, Z+1	; 0x01
    1f42:	02 81       	ldd	r16, Z+2	; 0x02
    1f44:	13 81       	ldd	r17, Z+3	; 0x03
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	fc 01       	movw	r30, r24
    1f58:	e5 56       	subi	r30, 0x65	; 101
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	20 81       	ld	r18, Z
    1f5e:	31 81       	ldd	r19, Z+1	; 0x01
    1f60:	42 81       	ldd	r20, Z+2	; 0x02
    1f62:	53 81       	ldd	r21, Z+3	; 0x03
    1f64:	c8 01       	movw	r24, r16
    1f66:	b7 01       	movw	r22, r14
    1f68:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__mulsi3>
    1f6c:	9b 01       	movw	r18, r22
    1f6e:	ac 01       	movw	r20, r24
    1f70:	c6 01       	movw	r24, r12
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	e5 56       	subi	r30, 0x65	; 101
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	20 83       	st	Z, r18
    1f82:	31 83       	std	Z+1, r19	; 0x01
    1f84:	42 83       	std	Z+2, r20	; 0x02
    1f86:	53 83       	std	Z+3, r21	; 0x03
											Result=Prametars[i+1];
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e5 56       	subi	r30, 0x65	; 101
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fa4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fa6:	80 93 97 00 	sts	0x0097, r24
    1faa:	90 93 98 00 	sts	0x0098, r25
    1fae:	a0 93 99 00 	sts	0x0099, r26
    1fb2:	b0 93 9a 00 	sts	0x009A, r27
    1fb6:	9d c0       	rjmp	.+314    	; 0x20f2 <HKPD_U8Calculator+0x418>
											break ;
										case '/':
											Prametars[i+1] =Prametars[i]/Prametars[i+1];
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	6c 01       	movw	r12, r24
    1fc0:	08 94       	sec
    1fc2:	c1 1c       	adc	r12, r1
    1fc4:	d1 1c       	adc	r13, r1
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e5 56       	subi	r30, 0x65	; 101
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	e0 80       	ld	r14, Z
    1fdc:	f1 80       	ldd	r15, Z+1	; 0x01
    1fde:	02 81       	ldd	r16, Z+2	; 0x02
    1fe0:	13 81       	ldd	r17, Z+3	; 0x03
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	e5 56       	subi	r30, 0x65	; 101
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	20 81       	ld	r18, Z
    1ffa:	31 81       	ldd	r19, Z+1	; 0x01
    1ffc:	42 81       	ldd	r20, Z+2	; 0x02
    1ffe:	53 81       	ldd	r21, Z+3	; 0x03
    2000:	c8 01       	movw	r24, r16
    2002:	b7 01       	movw	r22, r14
    2004:	0e 94 87 11 	call	0x230e	; 0x230e <__udivmodsi4>
    2008:	da 01       	movw	r26, r20
    200a:	c9 01       	movw	r24, r18
    200c:	9c 01       	movw	r18, r24
    200e:	ad 01       	movw	r20, r26
    2010:	c6 01       	movw	r24, r12
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	fc 01       	movw	r30, r24
    201c:	e5 56       	subi	r30, 0x65	; 101
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	20 83       	st	Z, r18
    2022:	31 83       	std	Z+1, r19	; 0x01
    2024:	42 83       	std	Z+2, r20	; 0x02
    2026:	53 83       	std	Z+3, r21	; 0x03
											Result=Prametars[i+1];
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	88 2f       	mov	r24, r24
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	fc 01       	movw	r30, r24
    203a:	e5 56       	subi	r30, 0x65	; 101
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	a2 81       	ldd	r26, Z+2	; 0x02
    2044:	b3 81       	ldd	r27, Z+3	; 0x03
    2046:	80 93 97 00 	sts	0x0097, r24
    204a:	90 93 98 00 	sts	0x0098, r25
    204e:	a0 93 99 00 	sts	0x0099, r26
    2052:	b0 93 9a 00 	sts	0x009A, r27
    2056:	4d c0       	rjmp	.+154    	; 0x20f2 <HKPD_U8Calculator+0x418>
											break ;
										case '*':
											Prametars[i+1] =Prametars[i]*Prametars[i+1];
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	6c 01       	movw	r12, r24
    2060:	08 94       	sec
    2062:	c1 1c       	adc	r12, r1
    2064:	d1 1c       	adc	r13, r1
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	fc 01       	movw	r30, r24
    2076:	e5 56       	subi	r30, 0x65	; 101
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	e0 80       	ld	r14, Z
    207c:	f1 80       	ldd	r15, Z+1	; 0x01
    207e:	02 81       	ldd	r16, Z+2	; 0x02
    2080:	13 81       	ldd	r17, Z+3	; 0x03
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	fc 01       	movw	r30, r24
    2094:	e5 56       	subi	r30, 0x65	; 101
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	20 81       	ld	r18, Z
    209a:	31 81       	ldd	r19, Z+1	; 0x01
    209c:	42 81       	ldd	r20, Z+2	; 0x02
    209e:	53 81       	ldd	r21, Z+3	; 0x03
    20a0:	c8 01       	movw	r24, r16
    20a2:	b7 01       	movw	r22, r14
    20a4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__mulsi3>
    20a8:	9b 01       	movw	r18, r22
    20aa:	ac 01       	movw	r20, r24
    20ac:	c6 01       	movw	r24, r12
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	fc 01       	movw	r30, r24
    20b8:	e5 56       	subi	r30, 0x65	; 101
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	20 83       	st	Z, r18
    20be:	31 83       	std	Z+1, r19	; 0x01
    20c0:	42 83       	std	Z+2, r20	; 0x02
    20c2:	53 83       	std	Z+3, r21	; 0x03
											Result=Prametars[i+1];
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	01 96       	adiw	r24, 0x01	; 1
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	fc 01       	movw	r30, r24
    20d6:	e5 56       	subi	r30, 0x65	; 101
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	a2 81       	ldd	r26, Z+2	; 0x02
    20e0:	b3 81       	ldd	r27, Z+3	; 0x03
    20e2:	80 93 97 00 	sts	0x0097, r24
    20e6:	90 93 98 00 	sts	0x0098, r25
    20ea:	a0 93 99 00 	sts	0x0099, r26
    20ee:	b0 93 9a 00 	sts	0x009A, r27

						Count_Digit_Prametar=0 ;

						if(Copy_U8Calculate_Result=='='){

							for(u8 i=0 ;i<Count_Math_Operators-1 ;i++){
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	80 91 96 00 	lds	r24, 0x0096
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	28 17       	cp	r18, r24
    210a:	39 07       	cpc	r19, r25
    210c:	0c f4       	brge	.+2      	; 0x2110 <HKPD_U8Calculator+0x436>
    210e:	92 ce       	rjmp	.-732    	; 0x1e34 <HKPD_U8Calculator+0x15a>
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <HKPD_U8Calculator+0x456>
						}

	}

		else{
			Prametar_Digit[Count_Digit_Prametar]=Copy_U8Calculate_Result-'0';
    2112:	80 91 95 00 	lds	r24, 0x0095
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	8c 85       	ldd	r24, Y+12	; 0x0c
    211c:	80 53       	subi	r24, 0x30	; 48
    211e:	f9 01       	movw	r30, r18
    2120:	ed 53       	subi	r30, 0x3D	; 61
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 83       	st	Z, r24
			Count_Digit_Prametar++;
    2126:	80 91 95 00 	lds	r24, 0x0095
    212a:	8f 5f       	subi	r24, 0xFF	; 255
    212c:	80 93 95 00 	sts	0x0095, r24
		}




	return Result ;
    2130:	80 91 97 00 	lds	r24, 0x0097
    2134:	90 91 98 00 	lds	r25, 0x0098
    2138:	a0 91 99 00 	lds	r26, 0x0099
    213c:	b0 91 9a 00 	lds	r27, 0x009A
}
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	2e 96       	adiw	r28, 0x0e	; 14
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	df 90       	pop	r13
    215e:	cf 90       	pop	r12
    2160:	08 95       	ret

00002162 <main>:




int main(void)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	2f 97       	sbiw	r28, 0x0f	; 15
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
	// Return of KPad Value ( Pressed Button  )
	u8 LOC_u8KeyValue;

	// Key Pad Initialize
	HKPD_Vid_Init();
    2176:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <HKPD_Vid_Init>

	// CLCD Initialize
	HCLCD_Vid8Bits_Init();
    217a:	0e 94 9d 0a 	call	0x153a	; 0x153a <HCLCD_Vid8Bits_Init>

	//Print Welcome Message and wait 1s and delete it
	HCLCD_VidWriteString_8Bits("Welcome...");
    217e:	80 e6       	ldi	r24, 0x60	; 96
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <HCLCD_VidWriteString_8Bits>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	aa e7       	ldi	r26, 0x7A	; 122
    218c:	b4 e4       	ldi	r27, 0x44	; 68
    218e:	8b 87       	std	Y+11, r24	; 0x0b
    2190:	9c 87       	std	Y+12, r25	; 0x0c
    2192:	ad 87       	std	Y+13, r26	; 0x0d
    2194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a e7       	ldi	r20, 0x7A	; 122
    21a4:	53 e4       	ldi	r21, 0x43	; 67
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8f 83       	std	Y+7, r24	; 0x07
    21b0:	98 87       	std	Y+8, r25	; 0x08
    21b2:	a9 87       	std	Y+9, r26	; 0x09
    21b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b6:	6f 81       	ldd	r22, Y+7	; 0x07
    21b8:	78 85       	ldd	r23, Y+8	; 0x08
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <main+0x76>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <main+0xf4>
	else if (__tmp > 65535)
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	78 85       	ldd	r23, Y+8	; 0x08
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <main+0xd6>
    221a:	89 e1       	ldi	r24, 0x19	; 25
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <main+0xc4>
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <main+0xb8>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <main+0x100>
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HCLCD_VidWriteCommand_8Bits(DISPLAY_CLEAR);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>


	while(1)
	{
		// Return of KPad Value ( Pressed Button  )
		LOC_u8KeyValue=HKPD_U8GetPressedButton();
    2270:	0e 94 30 09 	call	0x1260	; 0x1260 <HKPD_U8GetPressedButton>
    2274:	8f 87       	std	Y+15, r24	; 0x0f

		// 255 main No Press
		if(LOC_u8KeyValue!=255)
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	8f 3f       	cpi	r24, 0xFF	; 255
    227a:	d1 f3       	breq	.-12     	; 0x2270 <main+0x10e>
		{
			// If Press C clear Screen
			if(LOC_u8KeyValue=='C')
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	83 34       	cpi	r24, 0x43	; 67
    2280:	21 f4       	brne	.+8      	; 0x228a <main+0x128>
			{
				HCLCD_VidWriteCommand_8Bits(DISPLAY_CLEAR);
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>
    2288:	f3 cf       	rjmp	.-26     	; 0x2270 <main+0x10e>
			}
			// If press = will clear Screen and Print the Result of Operation on screen
			else if(LOC_u8KeyValue=='='){
    228a:	8f 85       	ldd	r24, Y+15	; 0x0f
    228c:	8d 33       	cpi	r24, 0x3D	; 61
    228e:	c9 f4       	brne	.+50     	; 0x22c2 <main+0x160>
				// Clear Screen
				HCLCD_VidWriteCommand_8Bits(DISPLAY_CLEAR);
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	0e 94 88 09 	call	0x1310	; 0x1310 <HCLCD_VidWriteCommand_8Bits>
				//Write the Result word in First Line
				HCLCD_VidSetPosition(HCLCD_LINE1,0);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HCLCD_VidSetPosition>
				HCLCD_VidWriteString_8Bits("The Result is : ");
    229e:	8b e6       	ldi	r24, 0x6B	; 107
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <HCLCD_VidWriteString_8Bits>
				//Write the Result  in second Line
				HCLCD_VidSetPosition(HCLCD_LINE2,0);
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HCLCD_VidSetPosition>
				HCLCD_VidWriteNumber_8Bits(HKPD_U8Calculator(LOC_u8KeyValue));
    22ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <HKPD_U8Calculator>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <HCLCD_VidWriteNumber_8Bits>
    22c0:	d7 cf       	rjmp	.-82     	; 0x2270 <main+0x10e>

			}
			else
			{
				// if input is Number or Mathematics operator send to Calculator function
				HKPD_U8Calculator(LOC_u8KeyValue);
    22c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c4:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <HKPD_U8Calculator>
				HCLCD_VidWriteChar_8Bits(LOC_u8KeyValue);
    22c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ca:	0e 94 97 0c 	call	0x192e	; 0x192e <HCLCD_VidWriteChar_8Bits>
    22ce:	d0 cf       	rjmp	.-96     	; 0x2270 <main+0x10e>

000022d0 <__mulsi3>:
    22d0:	62 9f       	mul	r22, r18
    22d2:	d0 01       	movw	r26, r0
    22d4:	73 9f       	mul	r23, r19
    22d6:	f0 01       	movw	r30, r0
    22d8:	82 9f       	mul	r24, r18
    22da:	e0 0d       	add	r30, r0
    22dc:	f1 1d       	adc	r31, r1
    22de:	64 9f       	mul	r22, r20
    22e0:	e0 0d       	add	r30, r0
    22e2:	f1 1d       	adc	r31, r1
    22e4:	92 9f       	mul	r25, r18
    22e6:	f0 0d       	add	r31, r0
    22e8:	83 9f       	mul	r24, r19
    22ea:	f0 0d       	add	r31, r0
    22ec:	74 9f       	mul	r23, r20
    22ee:	f0 0d       	add	r31, r0
    22f0:	65 9f       	mul	r22, r21
    22f2:	f0 0d       	add	r31, r0
    22f4:	99 27       	eor	r25, r25
    22f6:	72 9f       	mul	r23, r18
    22f8:	b0 0d       	add	r27, r0
    22fa:	e1 1d       	adc	r30, r1
    22fc:	f9 1f       	adc	r31, r25
    22fe:	63 9f       	mul	r22, r19
    2300:	b0 0d       	add	r27, r0
    2302:	e1 1d       	adc	r30, r1
    2304:	f9 1f       	adc	r31, r25
    2306:	bd 01       	movw	r22, r26
    2308:	cf 01       	movw	r24, r30
    230a:	11 24       	eor	r1, r1
    230c:	08 95       	ret

0000230e <__udivmodsi4>:
    230e:	a1 e2       	ldi	r26, 0x21	; 33
    2310:	1a 2e       	mov	r1, r26
    2312:	aa 1b       	sub	r26, r26
    2314:	bb 1b       	sub	r27, r27
    2316:	fd 01       	movw	r30, r26
    2318:	0d c0       	rjmp	.+26     	; 0x2334 <__udivmodsi4_ep>

0000231a <__udivmodsi4_loop>:
    231a:	aa 1f       	adc	r26, r26
    231c:	bb 1f       	adc	r27, r27
    231e:	ee 1f       	adc	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	a2 17       	cp	r26, r18
    2324:	b3 07       	cpc	r27, r19
    2326:	e4 07       	cpc	r30, r20
    2328:	f5 07       	cpc	r31, r21
    232a:	20 f0       	brcs	.+8      	; 0x2334 <__udivmodsi4_ep>
    232c:	a2 1b       	sub	r26, r18
    232e:	b3 0b       	sbc	r27, r19
    2330:	e4 0b       	sbc	r30, r20
    2332:	f5 0b       	sbc	r31, r21

00002334 <__udivmodsi4_ep>:
    2334:	66 1f       	adc	r22, r22
    2336:	77 1f       	adc	r23, r23
    2338:	88 1f       	adc	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	1a 94       	dec	r1
    233e:	69 f7       	brne	.-38     	; 0x231a <__udivmodsi4_loop>
    2340:	60 95       	com	r22
    2342:	70 95       	com	r23
    2344:	80 95       	com	r24
    2346:	90 95       	com	r25
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	bd 01       	movw	r22, r26
    234e:	cf 01       	movw	r24, r30
    2350:	08 95       	ret

00002352 <__prologue_saves__>:
    2352:	2f 92       	push	r2
    2354:	3f 92       	push	r3
    2356:	4f 92       	push	r4
    2358:	5f 92       	push	r5
    235a:	6f 92       	push	r6
    235c:	7f 92       	push	r7
    235e:	8f 92       	push	r8
    2360:	9f 92       	push	r9
    2362:	af 92       	push	r10
    2364:	bf 92       	push	r11
    2366:	cf 92       	push	r12
    2368:	df 92       	push	r13
    236a:	ef 92       	push	r14
    236c:	ff 92       	push	r15
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	ca 1b       	sub	r28, r26
    237c:	db 0b       	sbc	r29, r27
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	09 94       	ijmp

0000238a <__epilogue_restores__>:
    238a:	2a 88       	ldd	r2, Y+18	; 0x12
    238c:	39 88       	ldd	r3, Y+17	; 0x11
    238e:	48 88       	ldd	r4, Y+16	; 0x10
    2390:	5f 84       	ldd	r5, Y+15	; 0x0f
    2392:	6e 84       	ldd	r6, Y+14	; 0x0e
    2394:	7d 84       	ldd	r7, Y+13	; 0x0d
    2396:	8c 84       	ldd	r8, Y+12	; 0x0c
    2398:	9b 84       	ldd	r9, Y+11	; 0x0b
    239a:	aa 84       	ldd	r10, Y+10	; 0x0a
    239c:	b9 84       	ldd	r11, Y+9	; 0x09
    239e:	c8 84       	ldd	r12, Y+8	; 0x08
    23a0:	df 80       	ldd	r13, Y+7	; 0x07
    23a2:	ee 80       	ldd	r14, Y+6	; 0x06
    23a4:	fd 80       	ldd	r15, Y+5	; 0x05
    23a6:	0c 81       	ldd	r16, Y+4	; 0x04
    23a8:	1b 81       	ldd	r17, Y+3	; 0x03
    23aa:	aa 81       	ldd	r26, Y+2	; 0x02
    23ac:	b9 81       	ldd	r27, Y+1	; 0x01
    23ae:	ce 0f       	add	r28, r30
    23b0:	d1 1d       	adc	r29, r1
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	ed 01       	movw	r28, r26
    23be:	08 95       	ret

000023c0 <_exit>:
    23c0:	f8 94       	cli

000023c2 <__stop_program>:
    23c2:	ff cf       	rjmp	.-2      	; 0x23c2 <__stop_program>
